{"ast":null,"code":"import { useState, useEffect } from 'react'; //共享状态的useState 方法 rect hooks\n\nexport default function useStats(url) {\n  // console.log(url);\n  // from input 双向绑定新写法 \n  // react 很多写法都淘汰了\n  const {\n    0: stats,\n    1: setStats\n  } = useState(); // 加载ajax loading\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: error,\n    1: setError\n  } = useState(); // 封装state 的处理\n  // react hooks 还有什么函数，可以在订阅了useState的\n  // 组件 挂载上去后， 立即执行？ mounted() \n  // useEffect 相当于生命周期函数， \n  // state + lifecycle  -> react hooks  重要性\n  // 独立到一个模块\n\n  useEffect(() => {\n    //  console.log('mounted'); \n    async function fectchData() {\n      setLoading(true);\n      const data = await fetch(url).then(res => res.json()).catch(err => {\n        setError(err);\n      }); // console.log(data);\n\n      setStats(data);\n      setLoading(false);\n    }\n\n    fectchData();\n  }, [url]);\n  return {\n    stats,\n    loading,\n    error\n  };\n}","map":{"version":3,"sources":["D:/lesson_shuidi/LESSON/react/rona/utils/useStats.js"],"names":["useState","useEffect","useStats","url","stats","setStats","loading","setLoading","error","setError","fectchData","data","fetch","then","res","json","catch","err"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAA6C;;AAE7C,eAAe,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACpC;AACA;AACA;AACA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBL,QAAQ,EAAlC,CAJoC,CAKpC;;AACA,QAAM;AAAA,OAACM,OAAD;AAAA,OAAUC;AAAV,MAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACQ,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,EAAlC,CAPoC,CAQpC;AACA;AACA;AACA;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AAChB;AACE,mBAAeS,UAAf,GAA4B;AAC1BH,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMI,IAAI,GAAG,MAAMC,KAAK,CAACT,GAAD,CAAL,CAChBU,IADgB,CACXC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADI,EAEhBC,KAFgB,CAEVC,GAAG,IAAI;AACZR,QAAAA,QAAQ,CAACQ,GAAD,CAAR;AACD,OAJgB,CAAnB,CAF0B,CAO1B;;AACAZ,MAAAA,QAAQ,CAACM,IAAD,CAAR;AACAJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AAGD;;AACDG,IAAAA,UAAU;AACX,GAhBQ,EAgBN,CAACP,GAAD,CAhBM,CAAT;AAkBA,SAAO;AACLC,IAAAA,KADK;AAELE,IAAAA,OAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import { useState, useEffect } from 'react'; //共享状态的useState 方法 rect hooks\r\n\r\nexport default function useStats(url) {\r\n  // console.log(url);\r\n  // from input 双向绑定新写法 \r\n  // react 很多写法都淘汰了\r\n  const [stats, setStats] = useState(); \r\n  // 加载ajax loading\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState();\r\n  // 封装state 的处理\r\n  // react hooks 还有什么函数，可以在订阅了useState的\r\n  // 组件 挂载上去后， 立即执行？ mounted() \r\n  // useEffect 相当于生命周期函数， \r\n  // state + lifecycle  -> react hooks  重要性\r\n  // 独立到一个模块\r\n  useEffect(() => {\r\n  //  console.log('mounted'); \r\n    async function fectchData() {\r\n      setLoading(true);\r\n      const data = await fetch(url)\r\n        .then(res => res.json())\r\n        .catch(err => {\r\n          setError(err);\r\n        })\r\n      // console.log(data);\r\n      setStats(data);\r\n      setLoading(false);\r\n     \r\n      \r\n    }\r\n    fectchData();\r\n  }, [url])\r\n\r\n  return {\r\n    stats,\r\n    loading, \r\n    error\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}