{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react'; //共享状态的useState 方法 rect hooks\n\nexport default function useStats(url) {\n  // console.log(url);\n  // from input 双向绑定新写法 \n  // react 很多写法都淘汰了\n  var _useState = useState(),\n      stats = _useState[0],\n      setStats = _useState[1]; // 加载ajax loading\n\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(),\n      error = _useState3[0],\n      setError = _useState3[1]; // 封装state 的处理\n  // react hooks 还有什么函数，可以在订阅了useState的\n  // 组件 挂载上去后， 立即执行？ mounted() \n  // useEffect 相当于生命周期函数， \n  // state + lifecycle  -> react hooks  重要性\n  // 独立到一个模块\n\n\n  useEffect(function () {\n    //  console.log('mounted'); \n    function fectchData() {\n      var data;\n      return _regeneratorRuntime.async(function fectchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(fetch(url).then(function (res) {\n                return res.json();\n              })[\"catch\"](function (err) {\n                setError(err);\n              }));\n\n            case 3:\n              data = _context.sent;\n              // console.log(data);\n              setStats(data);\n              setLoading(false);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fectchData();\n  }, [url]);\n  return {\n    stats: stats,\n    loading: loading,\n    error: error\n  };\n}","map":{"version":3,"sources":["D:/lesson_shuidi/LESSON/react/rona/components/Stats.js"],"names":["useState","useEffect","useStats","url","stats","setStats","loading","setLoading","error","setError","fectchData","fetch","then","res","json","err","data"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAA6C;;AAE7C,eAAe,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACpC;AACA;AACA;AAHoC,kBAIVH,QAAQ,EAJE;AAAA,MAI7BI,KAJ6B;AAAA,MAItBC,QAJsB,iBAKpC;;;AALoC,mBAMNL,QAAQ,CAAC,IAAD,CANF;AAAA,MAM7BM,OAN6B;AAAA,MAMpBC,UANoB;;AAAA,mBAOVP,QAAQ,EAPE;AAAA,MAO7BQ,KAP6B;AAAA,MAOtBC,QAPsB,kBAQpC;AACA;AACA;AACA;AACA;AACA;;;AACAR,EAAAA,SAAS,CAAC,YAAM;AAChB;AACE,aAAeS,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACEH,cAAAA,UAAU,CAAC,IAAD,CAAV;AADF;AAAA,+CAEqBI,KAAK,CAACR,GAAD,CAAL,CAChBS,IADgB,CACX,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,eADQ,WAEV,UAAAC,GAAG,EAAI;AACZN,gBAAAA,QAAQ,CAACM,GAAD,CAAR;AACD,eAJgB,CAFrB;;AAAA;AAEQC,cAAAA,IAFR;AAOE;AACAX,cAAAA,QAAQ,CAACW,IAAD,CAAR;AACAT,cAAAA,UAAU,CAAC,KAAD,CAAV;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaAG,IAAAA,UAAU;AACX,GAhBQ,EAgBN,CAACP,GAAD,CAhBM,CAAT;AAkBA,SAAO;AACLC,IAAAA,KAAK,EAALA,KADK;AAELE,IAAAA,OAAO,EAAPA,OAFK;AAGLE,IAAAA,KAAK,EAALA;AAHK,GAAP;AAKD","sourcesContent":["import { useState, useEffect } from 'react'; //共享状态的useState 方法 rect hooks\r\n\r\nexport default function useStats(url) {\r\n  // console.log(url);\r\n  // from input 双向绑定新写法 \r\n  // react 很多写法都淘汰了\r\n  const [stats, setStats] = useState(); \r\n  // 加载ajax loading\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState();\r\n  // 封装state 的处理\r\n  // react hooks 还有什么函数，可以在订阅了useState的\r\n  // 组件 挂载上去后， 立即执行？ mounted() \r\n  // useEffect 相当于生命周期函数， \r\n  // state + lifecycle  -> react hooks  重要性\r\n  // 独立到一个模块\r\n  useEffect(() => {\r\n  //  console.log('mounted'); \r\n    async function fectchData() {\r\n      setLoading(true);\r\n      const data = await fetch(url)\r\n        .then(res => res.json())\r\n        .catch(err => {\r\n          setError(err);\r\n        })\r\n      // console.log(data);\r\n      setStats(data);\r\n      setLoading(false);\r\n     \r\n      \r\n    }\r\n    fectchData();\r\n  }, [url])\r\n\r\n  return {\r\n    stats,\r\n    loading, \r\n    error\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}